#pragma once

#include "stm32g4xx_hal.h"
#include <string>

class HCMSDisplay {
private:
    const uint16_t m_CLK_pin, m_DA_pin, m_RS_pin, m_CE_pin;
    GPIO_TypeDef *m_CLK_base, *m_DA_base, *m_RS_base, *m_CE_base;
    const uint8_t m_section;
    uint8_t m_section_cnt = 0;
    uint8_t m_reg = 0b00001100;

    void Init(const uint8_t brightness_percent, 
        const uint8_t peak_current_percent, 
        const bool sleep_mode);
    void CtrlRegLoad( uint8_t ctrl_reg );
    void DataLoad( const std::string& str );
public:
    HCMSDisplay(GPIO_TypeDef* _CLK_base, const uint32_t _CLK_pin, 
                GPIO_TypeDef* _DA_base, const uint32_t _DA_pin, 
                GPIO_TypeDef* _RS_base, const uint32_t _RS_pin, 
                GPIO_TypeDef* _CE_base, const uint32_t _CE_pin,
                const uint8_t section = 8,
                const uint8_t brightness_percent = 60, 
                const uint8_t peak_current_percent = 73, 
                const bool sleep_mode = false )
        : m_CLK_base(_CLK_base), m_CLK_pin(_CLK_pin),
          m_DA_base(_DA_base), m_DA_pin(_DA_pin),
          m_RS_base(_RS_base), m_RS_pin(_RS_pin),
          m_CE_base(_CE_base), m_CE_pin(_CE_pin),
          m_section(section) {
            Init( brightness_percent, peak_current_percent, sleep_mode );
          }
    // brightness_percent 0~100%
    // peak_current_percent 0~100%
    void CtrlRegSet( 
        const uint8_t brightness_percent = 100,
        const uint8_t peak_current_percent = 73, 
        const bool sleep_mode = false );

    void Sleep() {
        m_reg &= 0b10111111;
        CtrlRegLoad(m_reg);
    }

    void WakeUp() {
        m_reg |= 0b01000000;
        CtrlRegLoad(m_reg);
    }
    
    void Print( const std::string& text );
    void Print( const int data );
    void Print( const double data );

private:

    void CLK_H() { m_CLK_base->BSRR = (uint32_t)m_CLK_pin; }
    void DA_H() { m_DA_base->BSRR = (uint32_t)m_DA_pin; }
    void RS_H() { m_RS_base->BSRR = (uint32_t)m_RS_pin; }
    void CE_H() { m_CE_base->BSRR = (uint32_t)m_CE_pin; }

    void CLK_L() { m_CLK_base->BRR = (uint32_t)m_CLK_pin; }
    void DA_L() { m_DA_base->BRR = (uint32_t)m_DA_pin; }
    void RS_L() { m_RS_base->BRR = (uint32_t)m_RS_pin; }
    void CE_L() { m_CE_base->BRR = (uint32_t)m_CE_pin; }

    const uint8_t FontData7x5[ 0x80 ][ 5 ] = {	
        {0x00,0x00,0x00,0x00,0x00},		// 0   NUL
        {0x00,0x00,0x00,0x00,0x00},		// 1   SOH
        {0x00,0x00,0x00,0x00,0x00},		// 2   STX
        {0x00,0x00,0x00,0x00,0x00},		// 3   ETX
        {0x00,0x00,0x00,0x00,0x00},		// 4   EOT
        {0x00,0x00,0x00,0x00,0x00},		// 5   ENQ
        {0x00,0x00,0x00,0x00,0x00},		// 6   ACK
        {0x00,0x00,0x00,0x00,0x00},		// 7   BEL
        {0x00,0x00,0x00,0x00,0x00},		// 8   BS
        {0x00,0x00,0x00,0x00,0x00},		// 9   HT
        {0x00,0x00,0x00,0x00,0x00},		// a   LF
        {0x00,0x00,0x00,0x00,0x00},		// b   VT
        {0x00,0x00,0x00,0x00,0x00},		// c   FF
        {0x00,0x00,0x00,0x00,0x00},		// d   CR
        {0x00,0x00,0x00,0x00,0x00},		// e   SO
        {0x00,0x00,0x00,0x00,0x00},		// f   SI
        {0x00,0x00,0x00,0x00,0x00},		//  10   DLE
        {0x00,0x00,0x00,0x00,0x00},		//  11   DC1
        {0x00,0x00,0x00,0x00,0x00},		//  12   DC2
        {0x00,0x00,0x00,0x00,0x00},		//  13   DC3
        {0x00,0x00,0x00,0x00,0x00},		//  14   DC4
        {0x00,0x00,0x00,0x00,0x00},		//  15   NAK
        {0x00,0x00,0x00,0x00,0x00},		//  16   SYN
        {0x00,0x00,0x00,0x00,0x00},		//  17   ETB
        {0x00,0x00,0x00,0x00,0x00},		//  18   CAN
        {0x00,0x00,0x00,0x00,0x00},		//  19   EM
        {0x00,0x00,0x00,0x00,0x00},		//  1a   SUB
        {0x00,0x00,0x00,0x00,0x00},		//  1b   ESC
        {0x00,0x00,0x00,0x00,0x00},		//  1c   FS
        {0x00,0x00,0x00,0x00,0x00},		//  1d   GS
        {0x00,0x00,0x00,0x00,0x00},		//  1e   RS
        {0x00,0x00,0x00,0x00,0x00},		//  1f   US
        {0x00,0x00,0x00,0x00,0x00},		// 20   blank
        {0x00,0x00,0x7b,0x00,0x00},		// 21   !
        {0x00,0x70,0x00,0x70,0x00},		// 22   "
        {0x14,0x7f,0x14,0x7f,0x14},		// 23   #
        {0x24,0x2a,0x7f,0x2a,0x12},		// 24   $
        {0x23,0x13,0x08,0x64,0x62},		// 25   %
        {0x05,0x22,0x55,0x49,0x36},		// 26   &
        {0x00,0x00,0x60,0x50,0x00},		// 27   '
        {0x00,0x41,0x22,0x1c,0x00},		// 28   (
        {0x00,0x1c,0x22,0x41,0x00},		// 29   )
        {0x14,0x08,0x3e,0x08,0x14},		// 2A   *
        {0x08,0x08,0x3e,0x08,0x08},		// 2B   +
        {0x00,0x00,0x06,0x05,0x00},		// 2C   ,
        {0x08,0x08,0x08,0x08,0x08},		// 2D   -
        {0x00,0x00,0x03,0x03,0x00},		// 2E   .
        {0x20,0x10,0x08,0x04,0x02},		// 2F   / 										  
        {0x3e,0x51,0x49,0x45,0x3e},		//  30	0
        {0x00,0x01,0x7f,0x21,0x00},		//  31	1
        {0x31,0x49,0x45,0x43,0x21},		//  32	2
        {0x46,0x69,0x51,0x41,0x42},		//  33	3
        {0x04,0x7f,0x24,0x14,0x0c},		//  34	4
        {0x4e,0x51,0x51,0x51,0x72},		//  35	5
        {0x06,0x49,0x49,0x29,0x1e},		//  36	6
        {0x70,0x48,0x47,0x40,0x40},		//  37	7
        {0x36,0x49,0x49,0x49,0x36},		//  38	8
        {0x3c,0x4a,0x49,0x49,0x30},		//  39	9
        {0x00,0x00,0x36,0x36,0x00},		//  3A	:
        {0x00,0x00,0x36,0x35,0x00},		//  3B	;
        {0x00,0x41,0x22,0x14,0x08},		//  3C	<
        {0x14,0x14,0x14,0x14,0x14},		//  3D	=
        {0x08,0x14,0x22,0x41,0x00},		//  3E	>
        {0x30,0x48,0x44,0x45,0x20},		//  3F	?
        {0x32,0x49,0x79,0x41,0x3e},		// 40	@		 
        {0x3f,0x44,0x44,0x44,0x3f},		// 41	A		 
        {0x36,0x49,0x49,0x49,0x7f},		// 42	B		 
        {0x22,0x41,0x41,0x41,0x3e},		// 43	C		 
        {0x1c,0x22,0x41,0x41,0x7f},		// 44	D		 
        {0x41,0x49,0x49,0x49,0x7f},		// 45	E		 
        {0x40,0x48,0x48,0x48,0x7f},		// 46	F		 
        {0x2f,0x49,0x49,0x41,0x3e},		// 47	G		 
        {0x7f,0x08,0x08,0x08,0x7f},		// 48	H		 
        {0x00,0x41,0x7f,0x41,0x00},		// 49	I		 
        {0x40,0x7e,0x41,0x01,0x02},		// 4A	J		 
        {0x41,0x22,0x14,0x08,0x7f},		// 4B	K		 
        {0x01,0x01,0x01,0x01,0x7f},		// 4C	L		 
        {0x7f,0x20,0x18,0x20,0x7f},		// 4D	M		 
        {0x7f,0x04,0x08,0x10,0x7f},		// 4E	N		 
        {0x3e,0x41,0x41,0x41,0x3e},		// 4F	O		 
        {0x30,0x48,0x48,0x48,0x7f},		//  50	P	 
        {0x3d,0x42,0x45,0x41,0x3e},		//  51	Q	 
        {0x31,0x4a,0x4c,0x48,0x7f},		//  52	R	 
        {0x46,0x49,0x49,0x49,0x31},		//  53	S	 
        {0x40,0x40,0x7f,0x40,0x40},		//  54	T	 
        {0x7e,0x01,0x01,0x01,0x7e},		//  55	U	 
        {0x7c,0x02,0x01,0x02,0x7c},		//  56	V	 
        {0x7e,0x01,0x0e,0x01,0x7e},		//  57	W	 
        {0x63,0x14,0x08,0x14,0x63},		//  58	X	 
        {0x70,0x08,0x07,0x08,0x70},		//  59	Y	 
        {0x61,0x51,0x49,0x45,0x43},		//  5A	Z	 
        {0x00,0x41,0x41,0x7f,0x00},		//  5B	[	 
        {0x54,0x34,0x1f,0x34,0x54},		//  5C	|	 
        {0x00,0x7f,0x41,0x41,0x00},		//  5D	]	 
        {0x10,0x20,0x40,0x20,0x10},		//  5E	^	 
        {0x01,0x01,0x01,0x01,0x01},		//  5F	_	 
        {0x00,0x10,0x20,0x40,0x00},		// 60	'	 
        {0x0f,0x15,0x15,0x15,0x02},		// 61	a	 
        {0x0e,0x11,0x11,0x09,0x7f},		// 62	b	 
        {0x02,0x11,0x11,0x11,0x0e},		// 63	c	 
        {0x7f,0x09,0x11,0x11,0x0e},		// 64	d	 
        {0x0c,0x15,0x15,0x15,0x0e},		// 65	e	 
        {0x20,0x40,0x48,0x3f,0x08},		// 66	f	 
        {0x3e,0x25,0x25,0x25,0x18},		// 67	g	 
        {0x0f,0x10,0x10,0x08,0x7f},		// 68	h	 
        {0x00,0x01,0x5f,0x11,0x00},		// 69	i	 
        {0x00,0x5e,0x11,0x01,0x02},		// 6A	j	 
        {0x00,0x11,0x0a,0x04,0x7f},		// 6B	k	 
        {0x00,0x01,0x7f,0x41,0x00},		// 6C	l	 
        {0x0f,0x10,0x0c,0x10,0x1f},		// 6D	m	 
        {0x0f,0x10,0x10,0x08,0x1f},		// 6E	n	 
        {0x0e,0x11,0x11,0x11,0x0e},		// 6F	o	 
        {0x08,0x14,0x14,0x14,0x1f},		//  70	p	 
        {0x1f,0x0c,0x14,0x14,0x08},		//  71	q	 
        {0x08,0x10,0x10,0x08,0x1f},		//  72	r	 
        {0x02,0x15,0x15,0x15,0x09},		//  73	s	 
        {0x02,0x01,0x11,0x7e,0x10},		//  74	t	 
        {0x1f,0x02,0x01,0x01,0x1e},		//  75	u	 
        {0x1c,0x02,0x01,0x02,0x1c},		//  76	v	 
        {0x1e,0x01,0x0e,0x01,0x1e},		//  77	w	 
        {0x11,0x0a,0x04,0x0a,0x11},		//  78	x	 
        {0x1e,0x05,0x05,0x05,0x18},		//  79	y	 
        {0x11,0x19,0x15,0x13,0x11},		//  7A	z	 
        {0x00,0x41,0x36,0x08,0x00},		//  7B	{	 
        {0x00,0x00,0x7f,0x00,0x00},		//  7C	|	 
        {0x00,0x08,0x36,0x41,0x00},		//  7D	}	
        {0x08,0x04,0x04,0x08,0x04},		//	7E  ~    
        {0x00,0x00,0x00,0x00,0x00},		//	7F
    };
};